/**
 * (c) Andrzej Wsowski 2014
 * A set of constraints for the FiniteStateMachine example, implemented in Xtend.
 * I avoid EMF integration for constraints on purpose, to keep this simple.
 * IMHO, you should always avoid the EMF integration for constraints, if you do
 * not explicitly need it.  It seems just way to complex.
 */
package JUnitDomain.validation;

import JUnitDomain.After;
import JUnitDomain.Before;
import JUnitDomain.Fixture;
import JUnitDomain.Method;
import JUnitDomain.MethodAnnotation;
import JUnitDomain.Suite;
import JUnitDomain.Test;
import com.google.common.base.Objects;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class Constraints {
  /**
   * To solve the exercise, just replace the "true" constants
   * with suitable expressions and test them with some instance data
   */
  protected static boolean _constraint(final Fixture it) {
    boolean _and = false;
    boolean _or = false;
    Method _after = it.getAfter();
    boolean _equals = Objects.equal(_after, null);
    if (_equals) {
      _or = true;
    } else {
      Method _after_1 = it.getAfter();
      MethodAnnotation _annotation = _after_1.getAnnotation();
      _or = (_equals || (_annotation instanceof After));
    }
    if (!_or) {
      _and = false;
    } else {
      boolean _or_1 = false;
      Method _before = it.getBefore();
      boolean _notEquals = (!Objects.equal(_before, null));
      if (_notEquals) {
        _or_1 = true;
      } else {
        Method _before_1 = it.getBefore();
        MethodAnnotation _annotation_1 = _before_1.getAnnotation();
        _or_1 = (_notEquals || (_annotation_1 instanceof Before));
      }
      _and = (_or && _or_1);
    }
    return _and;
  }
  
  protected static boolean _constraint(final Suite it) {
    EList<Test> _tests = it.getTests();
    final Function1<Test,Boolean> _function = new Function1<Test,Boolean>() {
      public Boolean apply(final Test t) {
        return Boolean.valueOf((t instanceof Method));
      }
    };
    boolean _forall = IterableExtensions.<Test>forall(_tests, _function);
    return _forall;
  }
  
  /**
   * Fall back for all types that are not constrained
   */
  protected static boolean _constraint(final EObject it) {
    return true;
  }
  
  public static boolean constraint(final EObject it) {
    if (it instanceof Suite) {
      return _constraint((Suite)it);
    } else if (it instanceof Fixture) {
      return _constraint((Fixture)it);
    } else if (it != null) {
      return _constraint(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
}
